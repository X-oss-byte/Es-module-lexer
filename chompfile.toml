version = 0.1

extensions = ['chomp@0.1:npm', 'chomp@0.1:footprint']

[env-default]
WASI_PATH = '/opt/wasi-sdk'
WASM_TOOLS = '../wasm-tools/target/debug/wasm-tools'
WT = '../witjs/src/wct.js'
WIT_BINDGEN = '../wit-bindgen/target/debug/wit-bindgen'
WIT_COMPONENT = '../wit-bindgen/target/debug/wit-component'

[[task]]
name = 'build'
deps = ['dist/lexer.js', 'dist/lexer.cjs', 'dist/lexer.asm.js', 'dist/lexer.d.ts']

[[task]]
target = 'dist/lexer.cjs'
deps = ['dist/lexer.js']
run = 'babel dist/lexer.js | terser -c -m -o dist/lexer.cjs'

[[task]]
targets = ['dist/lexer.js', 'dist/lexer.d.ts']
deps = ['obj/lexer-component.wasm', 'obj/preamble']
run = '''
	${{ WT }} host obj/lexer-component.wasm -o dist --name=lexer --valid-lifting-optimization --optimize --minify -b9000 -q
	cat obj/preamble > dist/tmp ; cat dist/lexer.js >> dist/tmp ; mv dist/tmp dist/lexer.js
'''

[[task]]
target = 'dist/lexer.asm.js'
dep = 'obj/lexer-component.wasm'
run = '''
	${{ WT }} host obj/lexer-component.wasm -o dist --name=lexer.asm --valid-lifting-optimization --optimize --minify --asm -q
	cat obj/preamble.asm > dist/tmp ; cat dist/lexer.asm.js >> dist/tmp ; mv dist/tmp dist/lexer.asm.js
'''

[[task]]
targets = ['obj/preamble', 'obj/preamble.asm']
dep = 'package.json'
engine = 'node'
run = '''
import { readFile, writeFile } from 'fs/promises';
const { version } = JSON.parse(await readFile('package.json'));
await writeFile('obj/preamble', `/* es-module-lexer ${version} */\n`);
await writeFile('obj/preamble.asm', `/* es-module-lexer asm.js ${version} */\n`);
'''

[[task]]
target = 'obj/lexer-component.wasm'
stdio = 'stderr-only'
deps = ['obj/lexer.wasm', 'src/lexer-world.wit']
run = '''
  ${{ WIT_COMPONENT }} $DEP --encoding utf16 --world src/lexer-world.wit -o $TARGET
'''

[[task]]
target = 'obj/lexer.wasm'
deps = ['obj/lexer_world.c', 'obj/lexer_world.h', 'src/lexer.c', 'src/lexer.h']
stdio = 'stderr-only'
run = """
	${{ WASI_PATH }}/bin/clang src/lexer.c obj/lexer_world.c --sysroot=${{ WASI_PATH }}/share/wasi-sysroot -o obj/lexer.wasm -nostartfiles \
		"-Wl,-z,stack-size=1331200,--no-entry,--compress-relocations,--strip-all" \
		-Wno-logical-op-parentheses -Wno-parentheses \
		-Oz
"""

[[task]]
targets = ['obj/lexer_world.c', 'obj/lexer_world.h']
dep = 'src/lexer-world.wit'
# stdio = 'stderr-only'
run = '''
	${{ WIT_BINDGEN }} guest c --name lexer_world --string-encoding utf16 src/lexer-world.wit --no-helpers --out-dir obj
'''

[[task]]
name = 'bench'
serial = true
deps = ['bench:js', 'bench:wasm']

[[task]]
name = 'bench:js'
deps = ['dist/lexer.asm.js']
env = { BENCH = 'js' }
run = 'node --expose-gc bench/index.js'

[[task]]
name = 'bench:wasm'
deps = ['dist/lexer.js']
env = { BENCH = 'wasm' }
run = 'node --expose-gc bench/index.js'

[[task]]
name = 'test'
deps = ['test:wasm', 'test:asm']

[[task]]
name = 'test:js'
run = 'mocha -b -u tdd test/*.cjs'

[[task]]
name = 'test:asm'
deps = ['dist/lexer.asm.js']
env = { ASM = '1' }
run = 'mocha -b -u tdd test/*.cjs'

[[task]]
name = 'test:wasm'
deps = ['dist/lexer.js']
env = { WASM = '1' }
run = 'mocha -b -u tdd test/*.cjs'

[[task]]
target = 'obj/lexer.wat'
dep = 'obj/lexer.wasm'
run = '${{ WASM_TOOLS }} parse -t $DEP -o $TARGET'

[[task]]
target = 'obj/lexer-component.core.wat'
dep = 'obj/lexer-component.core.wasm'
run = '${{ WASM_TOOLS }} parse -t $DEP -o $TARGET'

[[task]]
name = 'footprint'
deps = ['dist/lexer.js', 'dist/lexer.asm.js']
template = 'footprint'
